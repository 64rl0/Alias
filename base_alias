# base_alias

#-----------------------------------------------------------------------
#  Description: base carlogtt personal aliases
#-----------------------------------------------------------------------

# -----
# Shell
# -----
if [[ "${SHELL}" == *"zsh"* ]]; then
    # Reload ~/.zshrc file
    alias src='source ~/.zshrc'
elif [[ "${SHELL}" == *"bash"* ]]; then
    # Reload ~/.bashrc file
    alias src='source ~/.bashrc'

    # Make tab-completion case-insensitive
    alias cicbash='bind "set completion-ignore-case on"'
else
    # Reload error
    alias src='echo -e "[ERROR] Could not detect shell for \`${0}\`. Please reload your shell manually."'
fi

# Clear terminal display
alias c='clear'

# Echo shell and path
alias shell='echo -e "\033[1;33mSHELL:\033[0m"; echo -e "Shell in Use: $0\nShell Levels: $SHLVL"; echo -e "\n\033[1;33mPATH:\033[0m"; echo -e "\033[1;33m- \033[0m${PATH//:/\\n\033[1;33m- \033[0m}" | sort -f'

# Same as shell
alias path='shell'

# Restore terminal settings when screwed up
alias fixstty='stty sane'


# ----------------
# General Commands
# ----------------
# Change directories
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'

# Check if 'bat' is installed and configure 'cat' alias
if bat --version >/dev/null 2>&1; then
    # Replacing cat with bat
    # By default, bat pipes its own output to a pager (e.g. less) if the
    # output is too large for one screen. If you would rather bat work like
    # cat all the time (never page output), you can set --paging=never as an
    # option.

    if [[ $(uname -s) == "Darwin" ]]; then
        # Preferred 'cat' implementation (macOS)
        alias cat="bat --theme='Monokai Extended' --paging=never"
    else
        # Preferred 'cat' implementation (Linux)
        alias cat="bat --theme='Monokai Extended'"
    fi

    # Get handle on the real 'cat' command
    alias realcat='/bin/cat'
fi

# Preferred 'tree' implementation
alias tree='tree -Capugh --du'

# Preferred 'vi' implementation
alias vi='vim'

# Sudo vim
alias svim='sudo vim'

# Preferred 'less' implementation
alias less='less -FRXc'

# Preferred 'wget' implementation
alias wget='wget -c'

# Quickly search for file in current directory
alias qfind='sudo find . -iname'


# ----
# Grep
# ----
# Colorize the grep command output
alias egrep='egrep --color=auto'

# Colorize the grep command output
alias fgrep='fgrep --color=auto'

# Colorize the grep command output
alias grep='grep --color=auto'


# -----------------------
# ls Command Enhancements
# -----------------------
# Preferred 'ls' implementation
alias ll='ls --color=auto -laFhv'

# Only hidden files - .*
alias llh='ll -d .*'

# Recurve ls
alias llr='ll -R'

# Sort by newest to oldest
alias llt='ll -t'

# Sort by oldest to newest
alias lltr='ll -tr'

# Sort by size largest to smallest
alias lls='ll -S'

# Sort by size smallest to largest
alias llsr='ll -Sr'


# ----------
# Disk Usage
# ----------
# Short and human-readable summarize listing
alias du0='sudo du -h -d 0'

# Short and human-readable directory listing
alias du1='sudo du -h -d 1'


# ------------------
# Process Management
# ------------------
# Preferred 'ps' implementation
alias psa='sudo ps -e -o "pid,ppid,stat,uid,user,pri,ni,tty,%cpu,%mem,rss,vsz,start,time,command"'

# Find process matching string
alias fps='psa | head -n 1; psa | grep -F -i'

# Recursively fild all process children
pstree() {
    find_children() {
        for child in $(sudo ps -e -o "pid,ppid" | awk -v ppid="${1}" '$2 == ppid {print $1}'); do
            echo -e '\033[47m'
            sudo ps -p "${child}" -o "pid,ppid,stat,uid,user,pri,ni,tty,%cpu,%mem,rss,vsz,start,time,command"
            echo -e '\033[0m'
            echo -e -n '\033[36m'
            if [[ $(uname -s) == "Darwin" ]]; then
                echo -e "PID Environment Variables\n $(sudo ps eww -o command ${child} | tr ' ' '\n' | awk '/=/{print}' | tr '\n' ' ')"
            else
                echo -e "PID Environment Variables\n $(sudo /bin/cat /proc/${child}/environ | tr '\0' '\n' | grep -E -v '^0$' | tr '\n' ' ')"
            fi
            echo -e -n '\033[32m'
            sudo lsof -p "${child}" | grep -v -E 'IPv4|IPv6'
            echo -e -n '\033[35m'
            sudo lsof -i -a -p "${child}"
            echo -e -n '\033[0m'
            find_children "${child}"
        done
        echo -e ""
    }

    find_parents() {
        local child_pid="${1}"
        local parent_pid=$(sudo ps -p "${child_pid}" -o ppid= | tr -d ' ')
        local parents=()

        # Collect all parent PIDs in a list
        while [ "${parent_pid}" -ne 1 ]; do
            parents+=("${parent_pid}")
            child_pid="${parent_pid}"
            parent_pid=$(sudo ps -p "${child_pid}" -o ppid= | tr -d ' ')
        done
        parents+=("1")

        # Print all parent PIDs in reverse order
        for ((idx=${#parents[@]}-1; idx>=0; idx--)); do
            pid="${parents[@]:${idx}:1}"
            echo -e '\033[47m'
            sudo ps -p "${pid}" -o "pid,ppid,stat,uid,user,pri,ni,tty,%cpu,%mem,rss,vsz,start,time,command"
            echo -e '\033[0m'
            echo -e -n '\033[36m'
            if [[ $(uname -s) == "Darwin" ]]; then
                echo -e "PID Environment Variables\n $(sudo ps eww -o command ${pid} | tr ' ' '\n' | awk '/=/{print}' | tr '\n' ' ')"
            else
                echo -e "PID Environment Variables\n $(sudo /bin/cat /proc/${pid}/environ | tr '\0' '\n' | grep -E -v '^0$' | tr '\n' ' ')"
            fi
            echo -e -n '\033[32m'
            sudo lsof -p "${pid}" | grep -v -E 'IPv4|IPv6'
            echo -e -n '\033[35m'
            sudo lsof -i -a -p "${pid}"
            echo -e -n '\033[0m'
        done
        echo -e ""
    }

    if [[ -z "${1}" ]]; then
        echo -e "Usage: pstree <PID>"
        return 1
    fi

    if ! sudo ps -p "${1}" >/dev/null 2>&1; then
        echo -e "Invalid <PID>"
        return 1
    fi

    # Print parent processes
    find_parents "${1}" | awk 'NF || !blank++'

    # Print target process
    echo -e '\033[43m'
    sudo ps -p "${1}" -o "pid,ppid,stat,uid,user,pri,ni,tty,%cpu,%mem,rss,vsz,start,time,command"
    echo -e '\033[0m'
    echo -e -n '\033[36m'
    if [[ $(uname -s) == "Darwin" ]]; then
        echo -e "PID Environment Variables\n $(sudo ps eww -o command ${1} | tr ' ' '\n' | awk '/=/{print}' | tr '\n' ' ')"
    else
        echo -e "PID Environment Variables\n $(sudo /bin/cat /proc/${1}/environ | tr '\0' '\n' | grep -E -v '^0$' | tr '\n' ' ')"
    fi
    echo -e -n '\033[32m'
    sudo lsof -p "${1}" | grep -v -E 'IPv4|IPv6'
    echo -e -n '\033[35m'
    sudo lsof -i -a -p "${1}"
    echo  -e -n '\033[0m'
    echo -e ""

    # Print child processes
    find_children "${1}" | awk 'NF || !blank++'
}

# Display open sockets
alias lsock='sudo lsof -i'

# Display only open UDP sockets
# -P and -n to improve performance as we only need the first line
alias lsocku='sudo lsof -i -P -n | head -n 1; lsock | grep -F "UDP"'

# Display only open TCP sockets
# -P and -n to improve performance as we only need the first line
alias lsockt='sudo lsof -i -P -n | head -n 1; lsock | grep -F "TCP"'

# All listening sockets
# -P and -n to improve performance as we only need the first line
alias lsockl='sudo lsof -i -P -n | head -n 1; lsock | grep -F "LISTEN"'

# Find open sockets matching string
# -P and -n to improve performance as we only need the first line
alias fsock='sudo lsof -i -P -n | head -n 1; lsock | grep -F -i'


# ------------------
# Network Management
# ------------------
# My external ip
alias ipext='echo -e "$(curl -s http://ipinfo.io/ip)"'

# All ipfw rules inc/ blocked IPs
alias shblocked='sudo ipfw list'


# ------------------------------
# File and Directory Permissions
# ------------------------------
if [[ $(uname -s) == "Darwin" ]]; then
    # Show permission of target in number (macOS)
    alias shmod='stat -f "%N %Sp %Lp"'
else
    # Show permission of target in number (Linux)
    alias shmod='stat --printf="%n %A %a \n"'
fi

# ---------- (nobody)
alias m000='chmod 000'

# -rw------- (user: rw, group: -, other: -)
alias m600='chmod 600'

# -rw-r----- (user: rw, group: r, other: -)
alias m640='chmod 640'

# -rw-r--r-- (user: rw, group: r, other: r)
alias m644='chmod 644'

# -rwxr-xr-x (user: rwx, group: rx, other: rx)
alias m755='chmod 755'

# -rwxrwxr-x (user: rwx, group: rwx, other: rx)
alias m775='chmod 775'

# ---x--x--x (user: --x, group: --x, other: --x)
alias mx='chmod a+x'


# -----------------
# System Management
# -----------------
# exit like vim
alias :q='exit'

# System reboot
alias reboot='sudo /sbin/reboot'

# System shutdown
alias shutdown='sudo /sbin/shutdown'


# ---------------
# Package Manager
# ---------------
# this cmds need sudo to run
if [ "$(id -u)" -ne 0 ]; then
    # yum always as sudo
    alias yum='sudo yum'

    # apt always as sudo
    alias apt='sudo apt'
fi


# ---
# Git
# ---
#
alias gs='git status'

#
alias gall='git add .'

#
alias gc='git commit -m'

#
alias gfch='git fetch'

#
alias gps='git push origin HEAD'

#
alias gpl='git pull origin HEAD'


# -------------------
# Brazil Build System
# -------------------
#
alias bb='brazil-build'

#
alias bba='bb apollo-pkg'

#
alias bre='brazil-runtime-exec'

#
alias brc='brazil-recursive-cmd'

#
alias brcall='brc --allPackages'

#
alias brcbb='brc brazil-build'

#
alias brcbba='brcbb apollo-pkg'

#
alias brcbball='brcbb --allPackages'

#
alias bws='brazil ws'

#
alias bwsuse='bws use -p'

#
alias bwscreate='bws create -n'


# ---------------
# Tmux Management
# ---------------
# tmux
alias tm='tmux'

# Attach to a tmux session
alias tma='tm attach-session'

# Attach to a tmux session with name
alias tman='tma -t'

# List tmux sessions
alias tmls='tm list-sessions'

# Start a new tmux session
alias tms='tm new-session'

# Start a new tmux session with name
alias tmsn='tms -s'


# -------------
# Date and Time
# -------------
# Preferred now format
alias now='date "+%a, %b %d %Y %T %Z, WeekNum %V"'

# Epoch time
alias timestamp='date +%s'

# Calendar for 3 months
alias cal3='cal -3'

if [[ $(uname -s) == "Darwin" ]]; then
    # Days left in year (macOS)
    alias daysleft='echo -e "There are $(($(date -jf "%b %d %Y" "Dec 31 $(date +%Y)" +%j) - $(date +%j))) days left in year $(date +%Y)."'
else
    # Days left in year (Linux)
    alias daysleft='echo -e "There are $(($(date +%j -d"Dec 31, $(date +%Y)")-$(date +%j))) days left in year $(date +%Y)."'
fi

#-----------------------------------------------------------------------
#  END of aliases
#-----------------------------------------------------------------------

